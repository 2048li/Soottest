public final class android.support.multidex.MultiDex extends java.lang.Object
{
    private static final boolean IS_VM_MULTIDEX_CAPABLE;
    private static final int MAX_SUPPORTED_SDK_VERSION;
    private static final int MIN_SDK_VERSION;
    private static final java.lang.String OLD_SECONDARY_FOLDER_NAME;
    private static final java.lang.String SECONDARY_FOLDER_NAME;
    static final java.lang.String TAG;
    private static final int VM_WITH_MULTIDEX_VERSION_MAJOR;
    private static final int VM_WITH_MULTIDEX_VERSION_MINOR;
    private static final java.util.Set installedApk;

    static void <clinit>()
    {
        java.lang.StringBuilder $r0;
        java.lang.String $r1;
        java.util.HashSet $r2;
        boolean $z0;

        <android.support.multidex.MultiDex: int VM_WITH_MULTIDEX_VERSION_MINOR> = 1;

        <android.support.multidex.MultiDex: int VM_WITH_MULTIDEX_VERSION_MAJOR> = 2;

        <android.support.multidex.MultiDex: java.lang.String TAG> = "MultiDex";

        <android.support.multidex.MultiDex: java.lang.String OLD_SECONDARY_FOLDER_NAME> = "secondary-dexes";

        <android.support.multidex.MultiDex: int MIN_SDK_VERSION> = 4;

        <android.support.multidex.MultiDex: int MAX_SUPPORTED_SDK_VERSION> = 20;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("code_cache");

        $r1 = <java.io.File: java.lang.String separator>;

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("secondary-dexes");

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        <android.support.multidex.MultiDex: java.lang.String SECONDARY_FOLDER_NAME> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        <android.support.multidex.MultiDex: java.util.Set installedApk> = $r2;

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.version");

        $z0 = staticinvoke <android.support.multidex.MultiDex: boolean isVMMultidexCapable(java.lang.String)>($r1);

        <android.support.multidex.MultiDex: boolean IS_VM_MULTIDEX_CAPABLE> = $z0;

        return;
    }

    private void <init>()
    {
        android.support.multidex.MultiDex $r0;

        $r0 := @this: android.support.multidex.MultiDex;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    static java.lang.reflect.Field access$0(java.lang.Object, java.lang.String) throws java.lang.NoSuchFieldException
    {
        java.lang.Object $r0;
        java.lang.String $r1;
        java.lang.reflect.Field $r2;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <android.support.multidex.MultiDex: java.lang.reflect.Field findField(java.lang.Object,java.lang.String)>($r0, $r1);

        return $r2;
    }

    static void access$1(java.lang.Object, java.lang.String, java.lang.Object[]) throws java.lang.NoSuchFieldException, java.lang.IllegalArgumentException, java.lang.IllegalAccessException
    {
        java.lang.Object $r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.Object[];

        staticinvoke <android.support.multidex.MultiDex: void expandFieldArray(java.lang.Object,java.lang.String,java.lang.Object[])>($r0, $r1, $r2);

        return;
    }

    static java.lang.reflect.Method access$2(java.lang.Object, java.lang.String, java.lang.Class[]) throws java.lang.NoSuchMethodException
    {
        java.lang.Object $r0;
        java.lang.String $r1;
        java.lang.Class[] $r2;
        java.lang.reflect.Method $r3;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.Class[];

        $r3 = staticinvoke <android.support.multidex.MultiDex: java.lang.reflect.Method findMethod(java.lang.Object,java.lang.String,java.lang.Class[])>($r0, $r1, $r2);

        return $r3;
    }

    private static boolean checkValidZipFiles(java.util.List)
    {
        java.util.List $r0;
        java.util.Iterator $r1;
        boolean $z0;
        java.lang.Object $r2;
        java.io.File $r3;

        $r0 := @parameter0: java.util.List;

        $r1 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        return 1;

     label2:
        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (java.io.File) $r2;

        $z0 = staticinvoke <android.support.multidex.MultiDexExtractor: boolean verifyZipFile(java.io.File)>($r3);

        if $z0 != 0 goto label1;

        return 0;
    }

    private static void clearOldDexDir(android.content.Context) throws java.lang.Exception
    {
        android.content.Context $r0;
        java.io.File $r1, $r2;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.io.File[] $r5;
        int $i0, $i1;
        long $l2;

        $r0 := @parameter0: android.content.Context;

        $r1 = new java.io.File;

        $r2 = virtualinvoke $r0.<android.content.Context: java.io.File getFilesDir()>();

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, "secondary-dexes");

        $z0 = virtualinvoke $r1.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label7;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Clearing old secondary dex dir (");

        $r4 = virtualinvoke $r1.<java.io.File: java.lang.String getPath()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MultiDex", $r4);

        $r5 = virtualinvoke $r1.<java.io.File: java.io.File[] listFiles()>();

        if $r5 != null goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Failed to list secondary dex dir content (");

        $r4 = virtualinvoke $r1.<java.io.File: java.lang.String getPath()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MultiDex", $r4);

        return;

     label1:
        $i0 = lengthof $r5;

        $i1 = 0;

     label2:
        if $i1 < $i0 goto label3;

        $z0 = virtualinvoke $r1.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label6;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Failed to delete secondary dex dir ");

        $r4 = virtualinvoke $r1.<java.io.File: java.lang.String getPath()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MultiDex", $r4);

        return;

     label3:
        $r2 = $r5[$i1];

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Trying to delete old file ");

        $r4 = virtualinvoke $r2.<java.io.File: java.lang.String getPath()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of size ");

        $l2 = virtualinvoke $r2.<java.io.File: long length()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MultiDex", $r4);

        $z0 = virtualinvoke $r2.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label5;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Failed to delete old file ");

        $r4 = virtualinvoke $r2.<java.io.File: java.lang.String getPath()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MultiDex", $r4);

     label4:
        $i1 = $i1 + 1;

        goto label2;

     label5:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Deleted old file ");

        $r4 = virtualinvoke $r2.<java.io.File: java.lang.String getPath()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MultiDex", $r4);

        goto label4;

     label6:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Deleted old secondary dex dir ");

        $r4 = virtualinvoke $r1.<java.io.File: java.lang.String getPath()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MultiDex", $r4);

        return;

     label7:
        return;
    }

    private static void expandFieldArray(java.lang.Object, java.lang.String, java.lang.Object[]) throws java.lang.NoSuchFieldException, java.lang.IllegalArgumentException, java.lang.IllegalAccessException
    {
        java.lang.Object $r0, $r4;
        java.lang.String $r1;
        java.lang.Object[] $r2, $r5, $r7;
        int $i0, $i1;
        java.lang.reflect.Field $r3;
        java.lang.Class $r6;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.Object[];

        $r3 = staticinvoke <android.support.multidex.MultiDex: java.lang.reflect.Field findField(java.lang.Object,java.lang.String)>($r0, $r1);

        $r4 = virtualinvoke $r3.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r0);

        $r5 = (java.lang.Object[]) $r4;

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r6.<java.lang.Class: java.lang.Class getComponentType()>();

        $i1 = lengthof $r5;

        $i0 = lengthof $r2;

        $i0 = $i1 + $i0;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r6, $i0);

        $r7 = (java.lang.Object[]) $r4;

        $i0 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r7, 0, $i0);

        $i0 = lengthof $r5;

        $i1 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r7, $i0, $i1);

        virtualinvoke $r3.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>($r0, $r7);

        return;
    }

    private static java.lang.reflect.Field findField(java.lang.Object, java.lang.String) throws java.lang.NoSuchFieldException
    {
        java.lang.Object $r0;
        java.lang.String $r1;
        java.lang.Class $r2;
        java.lang.NoSuchFieldException $r3;
        java.lang.StringBuilder $r4;
        java.lang.reflect.Field $r5;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

     label1:
        if $r2 != null goto label2;

        $r3 = new java.lang.NoSuchFieldException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Field ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found in ");

        $r2 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.NoSuchFieldException: void <init>(java.lang.String)>($r1);

        throw $r3;

     label2:
        $r5 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>($r1);

        $z0 = virtualinvoke $r5.<java.lang.reflect.Field: boolean isAccessible()>();

        if $z0 != 0 goto label5;

        virtualinvoke $r5.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

     label3:
        return $r5;

     label4:
        $r3 := @caughtexception;

        $r2 = virtualinvoke $r2.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label5:
        return $r5;

        catch java.lang.NoSuchFieldException from label2 to label3 with label4;
    }

    private static transient java.lang.reflect.Method findMethod(java.lang.Object, java.lang.String, java.lang.Class[]) throws java.lang.NoSuchMethodException
    {
        java.lang.Object $r0;
        java.lang.String $r1;
        java.lang.Class[] $r2;
        java.lang.Class $r3;
        java.lang.NoSuchMethodException $r4;
        java.lang.StringBuilder $r5;
        java.util.List $r6;
        java.lang.reflect.Method $r7;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.Class[];

        $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

     label1:
        if $r3 != null goto label2;

        $r4 = new java.lang.NoSuchMethodException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Method ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with parameters ");

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found in ");

        $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.NoSuchMethodException: void <init>(java.lang.String)>($r1);

        throw $r4;

     label2:
        $r7 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>($r1, $r2);

        $z0 = virtualinvoke $r7.<java.lang.reflect.Method: boolean isAccessible()>();

        if $z0 != 0 goto label5;

        virtualinvoke $r7.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

     label3:
        return $r7;

     label4:
        $r4 := @caughtexception;

        $r3 = virtualinvoke $r3.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label5:
        return $r7;

        catch java.lang.NoSuchMethodException from label2 to label3 with label4;
    }

    private static android.content.pm.ApplicationInfo getApplicationInfo(android.content.Context) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.content.Context $r0;
        java.lang.RuntimeException $r1;
        android.content.pm.PackageManager $r2;
        java.lang.String $r3;
        android.content.pm.ApplicationInfo $r4;

        $r0 := @parameter0: android.content.Context;

     label1:
        $r2 = virtualinvoke $r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r3 = virtualinvoke $r0.<android.content.Context: java.lang.String getPackageName()>();

     label2:
        if $r2 == null goto label5;

        if $r3 != null goto label4;

        return null;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("MultiDex", "Failure while trying to obtain ApplicationInfo from Context. Must be running in test mode. Skip patching.", $r1);

        return null;

     label4:
        $r4 = virtualinvoke $r2.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>($r3, 128);

        return $r4;

     label5:
        return null;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public static void install(android.content.Context)
    {
        android.content.Context $r0;
        java.lang.String $r1, $r12;
        java.io.File $r2;
        java.lang.Throwable $r3, $r9;
        boolean $z0;
        int $i0;
        java.lang.RuntimeException $r4;
        java.lang.StringBuilder $r5;
        android.content.pm.ApplicationInfo $r6;
        java.util.Set $r7, $r8;
        java.lang.Exception $r10;
        java.lang.ClassLoader $r11;
        java.util.List $r13;

        $r0 := @parameter0: android.content.Context;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MultiDex", "install");

        $z0 = <android.support.multidex.MultiDex: boolean IS_VM_MULTIDEX_CAPABLE>;

        if $z0 == 0 goto label01;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MultiDex", "VM has multidex support, MultiDex support library is disabled.");

        return;

     label01:
        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 >= 4 goto label02;

        $r4 = new java.lang.RuntimeException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Multi dex installation failed. SDK ");

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is unsupported. Min SDK version is ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(4);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>($r1);

        throw $r4;

     label02:
        $r6 = staticinvoke <android.support.multidex.MultiDex: android.content.pm.ApplicationInfo getApplicationInfo(android.content.Context)>($r0);

     label03:
        if $r6 == null goto label25;

     label04:
        $r7 = <android.support.multidex.MultiDex: java.util.Set installedApk>;

        entermonitor $r7;

     label05:
        $r1 = $r6.<android.content.pm.ApplicationInfo: java.lang.String sourceDir>;

        $r8 = <android.support.multidex.MultiDex: java.util.Set installedApk>;

        $z0 = interfaceinvoke $r8.<java.util.Set: boolean contains(java.lang.Object)>($r1);

        if $z0 == 0 goto label10;

        exitmonitor $r7;

     label06:
        return;

     label07:
        $r9 := @caughtexception;

        exitmonitor $r7;

     label08:
        throw $r9;

     label09:
        $r10 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MultiDex", "Multidex installation failure", $r10);

        $r4 = new java.lang.RuntimeException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Multi dex installation failed (");

        $r1 = virtualinvoke $r10.<java.lang.Exception: java.lang.String getMessage()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>($r1);

        throw $r4;

     label10:
        $r8 = <android.support.multidex.MultiDex: java.util.Set installedApk>;

        interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>($r1);

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 <= 20 goto label11;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("MultiDex is not guaranteed to work in SDK version ");

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": SDK version higher than ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(20);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should be backed by ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("runtime with built-in multidex capabilty but it\'s not the ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("case here: java.vm.version=\"");

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.version");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MultiDex", $r1);

     label11:
        $r11 = virtualinvoke $r0.<android.content.Context: java.lang.ClassLoader getClassLoader()>();

     label12:
        if $r11 != null goto label17;

     label13:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MultiDex", "Context class loader is null. Must be running in test mode. Skip patching.");

        exitmonitor $r7;

     label14:
        return;

     label15:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("MultiDex", "Failure while trying to obtain Context class loader. Must be running in test mode. Skip patching.", $r4);

        exitmonitor $r7;

     label16:
        return;

     label17:
        staticinvoke <android.support.multidex.MultiDex: void clearOldDexDir(android.content.Context)>($r0);

     label18:
        $r2 = new java.io.File;

        $r1 = $r6.<android.content.pm.ApplicationInfo: java.lang.String dataDir>;

        $r12 = <android.support.multidex.MultiDex: java.lang.String SECONDARY_FOLDER_NAME>;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r1, $r12);

        $r13 = staticinvoke <android.support.multidex.MultiDexExtractor: java.util.List load(android.content.Context,android.content.pm.ApplicationInfo,java.io.File,boolean)>($r0, $r6, $r2, 0);

        $z0 = staticinvoke <android.support.multidex.MultiDex: boolean checkValidZipFiles(java.util.List)>($r13);

        if $z0 == 0 goto label23;

        staticinvoke <android.support.multidex.MultiDex: void installSecondaryDexes(java.lang.ClassLoader,java.io.File,java.util.List)>($r11, $r2, $r13);

     label19:
        exitmonitor $r7;

     label20:
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MultiDex", "install done");

        return;

     label21:
        $r3 := @caughtexception;

     label22:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("MultiDex", "Something went wrong when trying to clear old MultiDex extraction, continuing without cleaning.", $r3);

        goto label18;

     label23:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MultiDex", "Files were not valid zip files.  Forcing a reload.");

        $r13 = staticinvoke <android.support.multidex.MultiDexExtractor: java.util.List load(android.content.Context,android.content.pm.ApplicationInfo,java.io.File,boolean)>($r0, $r6, $r2, 1);

        $z0 = staticinvoke <android.support.multidex.MultiDex: boolean checkValidZipFiles(java.util.List)>($r13);

        if $z0 == 0 goto label24;

        staticinvoke <android.support.multidex.MultiDex: void installSecondaryDexes(java.lang.ClassLoader,java.io.File,java.util.List)>($r11, $r2, $r13);

        goto label19;

     label24:
        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Zip files were not valid.");

        throw $r4;

     label25:
        return;

        catch java.lang.Exception from label02 to label03 with label09;
        catch java.lang.Exception from label04 to label05 with label09;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Exception from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label07;
        catch java.lang.RuntimeException from label11 to label12 with label15;
        catch java.lang.Throwable from label11 to label12 with label07;
        catch java.lang.Throwable from label13 to label14 with label07;
        catch java.lang.Throwable from label15 to label16 with label07;
        catch java.lang.Throwable from label17 to label18 with label21;
        catch java.lang.Throwable from label18 to label20 with label07;
        catch java.lang.Throwable from label22 to label25 with label07;
    }

    private static void installSecondaryDexes(java.lang.ClassLoader, java.io.File, java.util.List) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException, java.lang.NoSuchFieldException, java.lang.reflect.InvocationTargetException, java.lang.NoSuchMethodException, java.io.IOException
    {
        java.lang.ClassLoader $r0;
        java.io.File $r1;
        java.util.List $r2;
        boolean $z0;
        int $i0;

        $r0 := @parameter0: java.lang.ClassLoader;

        $r1 := @parameter1: java.io.File;

        $r2 := @parameter2: java.util.List;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 19 goto label1;

        staticinvoke <android.support.multidex.MultiDex$V19: void access$0(java.lang.ClassLoader,java.util.List,java.io.File)>($r0, $r2, $r1);

        return;

     label1:
        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 14 goto label2;

        staticinvoke <android.support.multidex.MultiDex$V14: void access$0(java.lang.ClassLoader,java.util.List,java.io.File)>($r0, $r2, $r1);

        return;

     label2:
        staticinvoke <android.support.multidex.MultiDex$V4: void access$0(java.lang.ClassLoader,java.util.List)>($r0, $r2);

        return;

     label3:
        return;
    }

    static boolean isVMMultidexCapable(java.lang.String)
    {
        java.lang.String $r0, $r3;
        boolean $z0, $z1;
        java.util.regex.Pattern $r1;
        java.util.regex.Matcher $r2;
        int $i0, $i1;
        java.lang.StringBuilder $r4;
        java.lang.NumberFormatException $r5;

        $r0 := @parameter0: java.lang.String;

        $z0 = 0;

        if $r0 == null goto label4;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(\\d+)\\.(\\d+)(\\.\\d+)?");

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r0);

        $z1 = virtualinvoke $r2.<java.util.regex.Matcher: boolean matches()>();

        if $z1 == 0 goto label4;

     label1:
        $r3 = virtualinvoke $r2.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

     label2:
        if $i0 > 2 goto label6;

        if $i0 != 2 goto label3;

        if $i1 >= 1 goto label6;

     label3:
        $z0 = 0;

     label4:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("VM with version ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        if $z0 == 0 goto label7;

        $r0 = " has multidex support";

     label5:
        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MultiDex", $r0);

        return $z0;

     label6:
        $z0 = 1;

        goto label4;

     label7:
        $r0 = " does not have multidex support";

        goto label5;

     label8:
        $r5 := @caughtexception;

        goto label4;

        catch java.lang.NumberFormatException from label1 to label2 with label8;
    }
}
