public class com.happyelements.security.shellguard.IOUtils extends java.lang.Object
{
    private static final int DEFAULT_BUFFER_SIZE;
    public static final char DIR_SEPARATOR;
    public static final char DIR_SEPARATOR_UNIX;
    public static final char DIR_SEPARATOR_WINDOWS;
    public static final java.lang.String LINE_SEPARATOR;
    public static final java.lang.String LINE_SEPARATOR_UNIX;
    public static final java.lang.String LINE_SEPARATOR_WINDOWS;

    static void <clinit>()
    {
        java.io.StringWriter $r0;
        java.io.PrintWriter $r1;
        java.lang.String $r2;
        char $c0;

        <com.happyelements.security.shellguard.IOUtils: java.lang.String LINE_SEPARATOR_WINDOWS> = "\r\n";

        <com.happyelements.security.shellguard.IOUtils: java.lang.String LINE_SEPARATOR_UNIX> = "\n";

        <com.happyelements.security.shellguard.IOUtils: char DIR_SEPARATOR_WINDOWS> = 92;

        <com.happyelements.security.shellguard.IOUtils: char DIR_SEPARATOR_UNIX> = 47;

        <com.happyelements.security.shellguard.IOUtils: int DEFAULT_BUFFER_SIZE> = 4096;

        $c0 = <java.io.File: char separatorChar>;

        <com.happyelements.security.shellguard.IOUtils: char DIR_SEPARATOR> = $c0;

        $r0 = new java.io.StringWriter;

        specialinvoke $r0.<java.io.StringWriter: void <init>(int)>(4);

        $r1 = new java.io.PrintWriter;

        specialinvoke $r1.<java.io.PrintWriter: void <init>(java.io.Writer)>($r0);

        virtualinvoke $r1.<java.io.PrintWriter: void println()>();

        $r2 = virtualinvoke $r0.<java.io.StringWriter: java.lang.String toString()>();

        <com.happyelements.security.shellguard.IOUtils: java.lang.String LINE_SEPARATOR> = $r2;

        return;
    }

    public void <init>()
    {
        com.happyelements.security.shellguard.IOUtils $r0;

        $r0 := @this: com.happyelements.security.shellguard.IOUtils;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void closeQuietly(java.io.InputStream)
    {
        java.io.InputStream $r0;
        java.io.IOException $r1;

        $r0 := @parameter0: java.io.InputStream;

        if $r0 == null goto label4;

     label1:
        virtualinvoke $r0.<java.io.InputStream: void close()>();

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        return;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static void closeQuietly(java.io.OutputStream)
    {
        java.io.OutputStream $r0;
        java.io.IOException $r1;

        $r0 := @parameter0: java.io.OutputStream;

        if $r0 == null goto label4;

     label1:
        virtualinvoke $r0.<java.io.OutputStream: void close()>();

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        return;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static void closeQuietly(java.io.Reader)
    {
        java.io.Reader $r0;
        java.io.IOException $r1;

        $r0 := @parameter0: java.io.Reader;

        if $r0 == null goto label4;

     label1:
        virtualinvoke $r0.<java.io.Reader: void close()>();

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        return;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static void closeQuietly(java.io.Writer)
    {
        java.io.Writer $r0;
        java.io.IOException $r1;

        $r0 := @parameter0: java.io.Writer;

        if $r0 == null goto label4;

     label1:
        virtualinvoke $r0.<java.io.Writer: void close()>();

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        return;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static boolean contentEquals(java.io.InputStream, java.io.InputStream) throws java.io.IOException
    {
        java.io.BufferedInputStream $r0;
        java.io.InputStream $r1, $r2;
        boolean $z0;
        int $i0, $i1;

        $r1 := @parameter0: java.io.InputStream;

        $r2 := @parameter1: java.io.InputStream;

        $z0 = $r1 instanceof java.io.BufferedInputStream;

        if $z0 != 0 goto label1;

        $r0 = new java.io.BufferedInputStream;

        specialinvoke $r0.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r1);

        $r1 = $r0;

     label1:
        $z0 = $r2 instanceof java.io.BufferedInputStream;

        if $z0 != 0 goto label2;

        $r0 = new java.io.BufferedInputStream;

        specialinvoke $r0.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r2);

        $r2 = $r0;

     label2:
        $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>();

     label3:
        if -1 != $i0 goto label4;

        $i0 = virtualinvoke $r2.<java.io.InputStream: int read()>();

        if $i0 != -1 goto label5;

        return 1;

     label4:
        $i1 = virtualinvoke $r2.<java.io.InputStream: int read()>();

        if $i0 != $i1 goto label6;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>();

        goto label3;

     label5:
        return 0;

     label6:
        return 0;
    }

    public static boolean contentEquals(java.io.Reader, java.io.Reader) throws java.io.IOException
    {
        java.io.BufferedReader $r0;
        java.io.Reader $r1, $r2;
        boolean $z0;
        int $i0, $i1;

        $r1 := @parameter0: java.io.Reader;

        $r2 := @parameter1: java.io.Reader;

        $z0 = $r1 instanceof java.io.BufferedReader;

        if $z0 != 0 goto label1;

        $r0 = new java.io.BufferedReader;

        specialinvoke $r0.<java.io.BufferedReader: void <init>(java.io.Reader)>($r1);

        $r1 = $r0;

     label1:
        $z0 = $r2 instanceof java.io.BufferedReader;

        if $z0 != 0 goto label2;

        $r0 = new java.io.BufferedReader;

        specialinvoke $r0.<java.io.BufferedReader: void <init>(java.io.Reader)>($r2);

        $r2 = $r0;

     label2:
        $i0 = virtualinvoke $r1.<java.io.Reader: int read()>();

     label3:
        if -1 != $i0 goto label4;

        $i0 = virtualinvoke $r2.<java.io.Reader: int read()>();

        if $i0 != -1 goto label5;

        return 1;

     label4:
        $i1 = virtualinvoke $r2.<java.io.Reader: int read()>();

        if $i0 != $i1 goto label6;

        $i0 = virtualinvoke $r1.<java.io.Reader: int read()>();

        goto label3;

     label5:
        return 0;

     label6:
        return 0;
    }

    public static int copy(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        java.io.OutputStream $r1;
        long $l0;
        byte $b1;
        int $i2;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: java.io.OutputStream;

        $l0 = staticinvoke <com.happyelements.security.shellguard.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)>($r0, $r1);

        $b1 = $l0 cmp 2147483647L;

        if $b1 <= 0 goto label1;

        return -1;

     label1:
        $i2 = (int) $l0;

        return $i2;
    }

    public static int copy(java.io.Reader, java.io.Writer) throws java.io.IOException
    {
        java.io.Reader $r0;
        java.io.Writer $r1;
        long $l0;
        byte $b1;
        int $i2;

        $r0 := @parameter0: java.io.Reader;

        $r1 := @parameter1: java.io.Writer;

        $l0 = staticinvoke <com.happyelements.security.shellguard.IOUtils: long copyLarge(java.io.Reader,java.io.Writer)>($r0, $r1);

        $b1 = $l0 cmp 2147483647L;

        if $b1 <= 0 goto label1;

        return -1;

     label1:
        $i2 = (int) $l0;

        return $i2;
    }

    public static void copy(java.io.InputStream, java.io.Writer) throws java.io.IOException
    {
        java.io.InputStream $r0;
        java.io.Writer $r1;
        java.io.InputStreamReader $r2;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: java.io.Writer;

        $r2 = new java.io.InputStreamReader;

        specialinvoke $r2.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r0);

        staticinvoke <com.happyelements.security.shellguard.IOUtils: int copy(java.io.Reader,java.io.Writer)>($r2, $r1);

        return;
    }

    public static void copy(java.io.InputStream, java.io.Writer, java.lang.String) throws java.io.IOException
    {
        java.io.InputStream $r0;
        java.io.Writer $r1;
        java.lang.String $r2;
        java.io.InputStreamReader $r3;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: java.io.Writer;

        $r2 := @parameter2: java.lang.String;

        if $r2 != null goto label1;

        staticinvoke <com.happyelements.security.shellguard.IOUtils: void copy(java.io.InputStream,java.io.Writer)>($r0, $r1);

        return;

     label1:
        $r3 = new java.io.InputStreamReader;

        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r0, $r2);

        staticinvoke <com.happyelements.security.shellguard.IOUtils: int copy(java.io.Reader,java.io.Writer)>($r3, $r1);

        return;
    }

    public static void copy(java.io.Reader, java.io.OutputStream) throws java.io.IOException
    {
        java.io.Reader $r0;
        java.io.OutputStream $r1;
        java.io.OutputStreamWriter $r2;

        $r0 := @parameter0: java.io.Reader;

        $r1 := @parameter1: java.io.OutputStream;

        $r2 = new java.io.OutputStreamWriter;

        specialinvoke $r2.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r1);

        staticinvoke <com.happyelements.security.shellguard.IOUtils: int copy(java.io.Reader,java.io.Writer)>($r0, $r2);

        virtualinvoke $r2.<java.io.OutputStreamWriter: void flush()>();

        return;
    }

    public static void copy(java.io.Reader, java.io.OutputStream, java.lang.String) throws java.io.IOException
    {
        java.io.Reader $r0;
        java.io.OutputStream $r1;
        java.lang.String $r2;
        java.io.OutputStreamWriter $r3;

        $r0 := @parameter0: java.io.Reader;

        $r1 := @parameter1: java.io.OutputStream;

        $r2 := @parameter2: java.lang.String;

        if $r2 != null goto label1;

        staticinvoke <com.happyelements.security.shellguard.IOUtils: void copy(java.io.Reader,java.io.OutputStream)>($r0, $r1);

        return;

     label1:
        $r3 = new java.io.OutputStreamWriter;

        specialinvoke $r3.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r1, $r2);

        staticinvoke <com.happyelements.security.shellguard.IOUtils: int copy(java.io.Reader,java.io.Writer)>($r0, $r3);

        virtualinvoke $r3.<java.io.OutputStreamWriter: void flush()>();

        return;
    }

    public static long copyLarge(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        java.io.OutputStream $r1;
        byte[] $r2;
        int $i0;
        long $l1, $l2;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: java.io.OutputStream;

        $r2 = newarray (byte)[4096];

        $l1 = 0L;

     label1:
        $i0 = virtualinvoke $r0.<java.io.InputStream: int read(byte[])>($r2);

        if -1 != $i0 goto label2;

        return $l1;

     label2:
        virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r2, 0, $i0);

        $l2 = (long) $i0;

        $l1 = $l1 + $l2;

        goto label1;
    }

    public static long copyLarge(java.io.Reader, java.io.Writer) throws java.io.IOException
    {
        java.io.Reader $r0;
        java.io.Writer $r1;
        char[] $r2;
        int $i0;
        long $l1, $l2;

        $r0 := @parameter0: java.io.Reader;

        $r1 := @parameter1: java.io.Writer;

        $r2 = newarray (char)[4096];

        $l1 = 0L;

     label1:
        $i0 = virtualinvoke $r0.<java.io.Reader: int read(char[])>($r2);

        if -1 != $i0 goto label2;

        return $l1;

     label2:
        virtualinvoke $r1.<java.io.Writer: void write(char[],int,int)>($r2, 0, $i0);

        $l2 = (long) $i0;

        $l1 = $l1 + $l2;

        goto label1;
    }

    public static java.util.List readLines(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        java.io.InputStreamReader $r1;
        java.util.List $r2;

        $r0 := @parameter0: java.io.InputStream;

        $r1 = new java.io.InputStreamReader;

        specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r0);

        $r2 = staticinvoke <com.happyelements.security.shellguard.IOUtils: java.util.List readLines(java.io.Reader)>($r1);

        return $r2;
    }

    public static java.util.List readLines(java.io.InputStream, java.lang.String) throws java.io.IOException
    {
        java.io.InputStream $r0;
        java.lang.String $r1;
        java.io.InputStreamReader $r2;
        java.util.List $r3;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: java.lang.String;

        if $r1 != null goto label1;

        $r3 = staticinvoke <com.happyelements.security.shellguard.IOUtils: java.util.List readLines(java.io.InputStream)>($r0);

        return $r3;

     label1:
        $r2 = new java.io.InputStreamReader;

        specialinvoke $r2.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r0, $r1);

        $r3 = staticinvoke <com.happyelements.security.shellguard.IOUtils: java.util.List readLines(java.io.Reader)>($r2);

        return $r3;
    }

    public static java.util.List readLines(java.io.Reader) throws java.io.IOException
    {
        java.io.Reader $r0;
        java.util.ArrayList $r1;
        java.io.BufferedReader $r2;
        java.lang.String $r3;

        $r0 := @parameter0: java.io.Reader;

        $r2 = new java.io.BufferedReader;

        specialinvoke $r2.<java.io.BufferedReader: void <init>(java.io.Reader)>($r0);

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r3 = virtualinvoke $r2.<java.io.BufferedReader: java.lang.String readLine()>();

     label1:
        if $r3 != null goto label2;

        return $r1;

     label2:
        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        $r3 = virtualinvoke $r2.<java.io.BufferedReader: java.lang.String readLine()>();

        goto label1;
    }

    public static byte[] toByteArray(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        java.io.ByteArrayOutputStream $r1;
        byte[] $r2;

        $r0 := @parameter0: java.io.InputStream;

        $r1 = new java.io.ByteArrayOutputStream;

        specialinvoke $r1.<java.io.ByteArrayOutputStream: void <init>()>();

        staticinvoke <com.happyelements.security.shellguard.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>($r0, $r1);

        $r2 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r2;
    }

    public static byte[] toByteArray(java.io.Reader) throws java.io.IOException
    {
        java.io.Reader $r0;
        java.io.ByteArrayOutputStream $r1;
        byte[] $r2;

        $r0 := @parameter0: java.io.Reader;

        $r1 = new java.io.ByteArrayOutputStream;

        specialinvoke $r1.<java.io.ByteArrayOutputStream: void <init>()>();

        staticinvoke <com.happyelements.security.shellguard.IOUtils: void copy(java.io.Reader,java.io.OutputStream)>($r0, $r1);

        $r2 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r2;
    }

    public static byte[] toByteArray(java.io.Reader, java.lang.String) throws java.io.IOException
    {
        java.io.Reader $r0;
        java.lang.String $r1;
        java.io.ByteArrayOutputStream $r2;
        byte[] $r3;

        $r0 := @parameter0: java.io.Reader;

        $r1 := @parameter1: java.lang.String;

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>()>();

        staticinvoke <com.happyelements.security.shellguard.IOUtils: void copy(java.io.Reader,java.io.OutputStream,java.lang.String)>($r0, $r2, $r1);

        $r3 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r3;
    }

    public static byte[] toByteArray(java.lang.String) throws java.io.IOException
    {
        java.lang.String $r0;
        byte[] $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        return $r1;
    }

    public static char[] toCharArray(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        java.io.CharArrayWriter $r1;
        char[] $r2;

        $r0 := @parameter0: java.io.InputStream;

        $r1 = new java.io.CharArrayWriter;

        specialinvoke $r1.<java.io.CharArrayWriter: void <init>()>();

        staticinvoke <com.happyelements.security.shellguard.IOUtils: void copy(java.io.InputStream,java.io.Writer)>($r0, $r1);

        $r2 = virtualinvoke $r1.<java.io.CharArrayWriter: char[] toCharArray()>();

        return $r2;
    }

    public static char[] toCharArray(java.io.InputStream, java.lang.String) throws java.io.IOException
    {
        java.io.InputStream $r0;
        java.lang.String $r1;
        java.io.CharArrayWriter $r2;
        char[] $r3;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: java.lang.String;

        $r2 = new java.io.CharArrayWriter;

        specialinvoke $r2.<java.io.CharArrayWriter: void <init>()>();

        staticinvoke <com.happyelements.security.shellguard.IOUtils: void copy(java.io.InputStream,java.io.Writer,java.lang.String)>($r0, $r2, $r1);

        $r3 = virtualinvoke $r2.<java.io.CharArrayWriter: char[] toCharArray()>();

        return $r3;
    }

    public static char[] toCharArray(java.io.Reader) throws java.io.IOException
    {
        java.io.Reader $r0;
        java.io.CharArrayWriter $r1;
        char[] $r2;

        $r0 := @parameter0: java.io.Reader;

        $r1 = new java.io.CharArrayWriter;

        specialinvoke $r1.<java.io.CharArrayWriter: void <init>()>();

        staticinvoke <com.happyelements.security.shellguard.IOUtils: int copy(java.io.Reader,java.io.Writer)>($r0, $r1);

        $r2 = virtualinvoke $r1.<java.io.CharArrayWriter: char[] toCharArray()>();

        return $r2;
    }

    public static java.io.InputStream toInputStream(java.lang.String)
    {
        java.lang.String $r0;
        java.io.ByteArrayInputStream $r1;
        byte[] $r2;

        $r0 := @parameter0: java.lang.String;

        $r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        $r1 = new java.io.ByteArrayInputStream;

        specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r2);

        return $r1;
    }

    public static java.io.InputStream toInputStream(java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.lang.String $r0, $r1;
        java.io.ByteArrayInputStream $r2;
        byte[] $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        if $r1 == null goto label2;

        $r3 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>($r1);

     label1:
        $r2 = new java.io.ByteArrayInputStream;

        specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>($r3);

        return $r2;

     label2:
        $r3 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        goto label1;
    }

    public static java.lang.String toString(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        java.io.StringWriter $r1;
        java.lang.String $r2;

        $r0 := @parameter0: java.io.InputStream;

        $r1 = new java.io.StringWriter;

        specialinvoke $r1.<java.io.StringWriter: void <init>()>();

        staticinvoke <com.happyelements.security.shellguard.IOUtils: void copy(java.io.InputStream,java.io.Writer)>($r0, $r1);

        $r2 = virtualinvoke $r1.<java.io.StringWriter: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String toString(java.io.InputStream, java.lang.String) throws java.io.IOException
    {
        java.io.InputStream $r0;
        java.lang.String $r1;
        java.io.StringWriter $r2;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: java.lang.String;

        $r2 = new java.io.StringWriter;

        specialinvoke $r2.<java.io.StringWriter: void <init>()>();

        staticinvoke <com.happyelements.security.shellguard.IOUtils: void copy(java.io.InputStream,java.io.Writer,java.lang.String)>($r0, $r2, $r1);

        $r1 = virtualinvoke $r2.<java.io.StringWriter: java.lang.String toString()>();

        return $r1;
    }

    public static java.lang.String toString(java.io.Reader) throws java.io.IOException
    {
        java.io.Reader $r0;
        java.io.StringWriter $r1;
        java.lang.String $r2;

        $r0 := @parameter0: java.io.Reader;

        $r1 = new java.io.StringWriter;

        specialinvoke $r1.<java.io.StringWriter: void <init>()>();

        staticinvoke <com.happyelements.security.shellguard.IOUtils: int copy(java.io.Reader,java.io.Writer)>($r0, $r1);

        $r2 = virtualinvoke $r1.<java.io.StringWriter: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String toString(byte[]) throws java.io.IOException
    {
        byte[] $r0;
        java.lang.String $r1;

        $r0 := @parameter0: byte[];

        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(byte[])>($r0);

        return $r1;
    }

    public static java.lang.String toString(byte[], java.lang.String) throws java.io.IOException
    {
        byte[] $r0;
        java.lang.String $r1, $r2;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.lang.String;

        if $r1 != null goto label1;

        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(byte[])>($r0);

        return $r1;

     label1:
        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(byte[],java.lang.String)>($r0, $r1);

        return $r2;
    }

    public static void write(java.lang.String, java.io.OutputStream) throws java.io.IOException
    {
        java.lang.String $r0;
        java.io.OutputStream $r1;
        byte[] $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.io.OutputStream;

        if $r0 == null goto label1;

        $r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r2);

        return;

     label1:
        return;
    }

    public static void write(java.lang.String, java.io.OutputStream, java.lang.String) throws java.io.IOException
    {
        java.lang.String $r0, $r2;
        java.io.OutputStream $r1;
        byte[] $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.io.OutputStream;

        $r2 := @parameter2: java.lang.String;

        if $r0 == null goto label2;

        if $r2 != null goto label1;

        staticinvoke <com.happyelements.security.shellguard.IOUtils: void write(java.lang.String,java.io.OutputStream)>($r0, $r1);

        return;

     label1:
        $r3 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>($r2);

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r3);

        return;

     label2:
        return;
    }

    public static void write(java.lang.String, java.io.Writer) throws java.io.IOException
    {
        java.lang.String $r0;
        java.io.Writer $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.io.Writer;

        if $r0 == null goto label1;

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>($r0);

        return;

     label1:
        return;
    }

    public static void write(java.lang.StringBuffer, java.io.OutputStream) throws java.io.IOException
    {
        java.lang.StringBuffer $r0;
        java.io.OutputStream $r1;
        java.lang.String $r2;
        byte[] $r3;

        $r0 := @parameter0: java.lang.StringBuffer;

        $r1 := @parameter1: java.io.OutputStream;

        if $r0 == null goto label1;

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes()>();

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r3);

        return;

     label1:
        return;
    }

    public static void write(java.lang.StringBuffer, java.io.OutputStream, java.lang.String) throws java.io.IOException
    {
        java.lang.StringBuffer $r0;
        java.io.OutputStream $r1;
        java.lang.String $r2, $r3;
        byte[] $r4;

        $r0 := @parameter0: java.lang.StringBuffer;

        $r1 := @parameter1: java.io.OutputStream;

        $r2 := @parameter2: java.lang.String;

        if $r0 == null goto label2;

        if $r2 != null goto label1;

        staticinvoke <com.happyelements.security.shellguard.IOUtils: void write(java.lang.StringBuffer,java.io.OutputStream)>($r0, $r1);

        return;

     label1:
        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        $r4 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.lang.String)>($r2);

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r4);

        return;

     label2:
        return;
    }

    public static void write(java.lang.StringBuffer, java.io.Writer) throws java.io.IOException
    {
        java.lang.StringBuffer $r0;
        java.io.Writer $r1;
        java.lang.String $r2;

        $r0 := @parameter0: java.lang.StringBuffer;

        $r1 := @parameter1: java.io.Writer;

        if $r0 == null goto label1;

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>($r2);

        return;

     label1:
        return;
    }

    public static void write(byte[], java.io.OutputStream) throws java.io.IOException
    {
        byte[] $r0;
        java.io.OutputStream $r1;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.io.OutputStream;

        if $r0 == null goto label1;

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r0);

        return;

     label1:
        return;
    }

    public static void write(byte[], java.io.Writer) throws java.io.IOException
    {
        byte[] $r0;
        java.io.Writer $r1;
        java.lang.String $r2;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.io.Writer;

        if $r0 == null goto label1;

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(byte[])>($r0);

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>($r2);

        return;

     label1:
        return;
    }

    public static void write(byte[], java.io.Writer, java.lang.String) throws java.io.IOException
    {
        byte[] $r0;
        java.io.Writer $r1;
        java.lang.String $r2, $r3;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.io.Writer;

        $r2 := @parameter2: java.lang.String;

        if $r0 == null goto label2;

        if $r2 != null goto label1;

        staticinvoke <com.happyelements.security.shellguard.IOUtils: void write(byte[],java.io.Writer)>($r0, $r1);

        return;

     label1:
        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(byte[],java.lang.String)>($r0, $r2);

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>($r3);

        return;

     label2:
        return;
    }

    public static void write(char[], java.io.OutputStream) throws java.io.IOException
    {
        char[] $r0;
        java.io.OutputStream $r1;
        byte[] $r2;
        java.lang.String $r3;

        $r0 := @parameter0: char[];

        $r1 := @parameter1: java.io.OutputStream;

        if $r0 == null goto label1;

        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(char[])>($r0);

        $r2 = virtualinvoke $r3.<java.lang.String: byte[] getBytes()>();

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r2);

        return;

     label1:
        return;
    }

    public static void write(char[], java.io.OutputStream, java.lang.String) throws java.io.IOException
    {
        char[] $r0;
        java.io.OutputStream $r1;
        java.lang.String $r2, $r4;
        byte[] $r3;

        $r0 := @parameter0: char[];

        $r1 := @parameter1: java.io.OutputStream;

        $r2 := @parameter2: java.lang.String;

        if $r0 == null goto label2;

        if $r2 != null goto label1;

        staticinvoke <com.happyelements.security.shellguard.IOUtils: void write(char[],java.io.OutputStream)>($r0, $r1);

        return;

     label1:
        $r4 = new java.lang.String;

        specialinvoke $r4.<java.lang.String: void <init>(char[])>($r0);

        $r3 = virtualinvoke $r4.<java.lang.String: byte[] getBytes(java.lang.String)>($r2);

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r3);

        return;

     label2:
        return;
    }

    public static void write(char[], java.io.Writer) throws java.io.IOException
    {
        char[] $r0;
        java.io.Writer $r1;

        $r0 := @parameter0: char[];

        $r1 := @parameter1: java.io.Writer;

        if $r0 == null goto label1;

        virtualinvoke $r1.<java.io.Writer: void write(char[])>($r0);

        return;

     label1:
        return;
    }

    public static void writeLines(java.util.Collection, java.lang.String, java.io.OutputStream) throws java.io.IOException
    {
        java.util.Collection $r0;
        java.io.OutputStream $r1;
        java.lang.String $r2, $r5;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        byte[] $r6;

        $r0 := @parameter0: java.util.Collection;

        $r2 := @parameter1: java.lang.String;

        $r1 := @parameter2: java.io.OutputStream;

        if $r0 != null goto label1;

        return;

     label1:
        if $r2 != null goto label2;

        $r2 = <com.happyelements.security.shellguard.IOUtils: java.lang.String LINE_SEPARATOR>;

     label2:
        $r3 = interfaceinvoke $r0.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        if $r4 == null goto label4;

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        $r6 = virtualinvoke $r5.<java.lang.String: byte[] getBytes()>();

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r6);

     label4:
        $r6 = virtualinvoke $r2.<java.lang.String: byte[] getBytes()>();

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r6);

        goto label3;

     label5:
        return;
    }

    public static void writeLines(java.util.Collection, java.lang.String, java.io.OutputStream, java.lang.String) throws java.io.IOException
    {
        java.util.Collection $r0;
        java.io.OutputStream $r1;
        java.lang.String $r2, $r3, $r6;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        byte[] $r7;

        $r0 := @parameter0: java.util.Collection;

        $r3 := @parameter1: java.lang.String;

        $r1 := @parameter2: java.io.OutputStream;

        $r2 := @parameter3: java.lang.String;

        if $r2 != null goto label1;

        staticinvoke <com.happyelements.security.shellguard.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)>($r0, $r3, $r1);

        return;

     label1:
        if $r0 == null goto label5;

        if $r3 != null goto label2;

        $r3 = <com.happyelements.security.shellguard.IOUtils: java.lang.String LINE_SEPARATOR>;

     label2:
        $r4 = interfaceinvoke $r0.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        if $r5 == null goto label4;

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        $r7 = virtualinvoke $r6.<java.lang.String: byte[] getBytes(java.lang.String)>($r2);

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r7);

     label4:
        $r7 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.lang.String)>($r2);

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r7);

        goto label3;

     label5:
        return;

     label6:
        return;
    }

    public static void writeLines(java.util.Collection, java.lang.String, java.io.Writer) throws java.io.IOException
    {
        java.util.Collection $r0;
        java.io.Writer $r1;
        java.lang.String $r2, $r5;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;

        $r0 := @parameter0: java.util.Collection;

        $r2 := @parameter1: java.lang.String;

        $r1 := @parameter2: java.io.Writer;

        if $r0 != null goto label1;

        return;

     label1:
        if $r2 != null goto label2;

        $r2 = <com.happyelements.security.shellguard.IOUtils: java.lang.String LINE_SEPARATOR>;

     label2:
        $r3 = interfaceinvoke $r0.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        if $r4 == null goto label4;

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>($r5);

     label4:
        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>($r2);

        goto label3;

     label5:
        return;
    }
}
