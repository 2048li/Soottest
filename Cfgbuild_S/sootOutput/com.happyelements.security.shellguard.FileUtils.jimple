public class com.happyelements.security.shellguard.FileUtils extends java.lang.Object
{
    public static final java.io.File[] EMPTY_FILE_ARRAY;
    public static final long ONE_GB;
    public static final long ONE_KB;
    public static final long ONE_MB;

    static void <clinit>()
    {
        java.io.File[] $r0;

        <com.happyelements.security.shellguard.FileUtils: long ONE_MB> = 1048576L;

        <com.happyelements.security.shellguard.FileUtils: long ONE_KB> = 1024L;

        <com.happyelements.security.shellguard.FileUtils: long ONE_GB> = 1073741824L;

        $r0 = newarray (java.io.File)[0];

        <com.happyelements.security.shellguard.FileUtils: java.io.File[] EMPTY_FILE_ARRAY> = $r0;

        return;
    }

    public void <init>()
    {
        com.happyelements.security.shellguard.FileUtils $r0;

        $r0 := @this: com.happyelements.security.shellguard.FileUtils;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String byteCountToDisplaySize(long)
    {
        long $l0, $l1;
        byte $b2;
        java.lang.StringBuilder $r0;
        java.lang.String $r1;

        $l0 := @parameter0: long;

        $l1 = $l0 / 1073741824L;

        $b2 = $l1 cmp 0L;

        if $b2 <= 0 goto label1;

        $r0 = new java.lang.StringBuilder;

        $l0 = $l0 / 1073741824L;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0);

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r1);

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" GB");

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;

     label1:
        $l1 = $l0 / 1048576L;

        $b2 = $l1 cmp 0L;

        if $b2 <= 0 goto label2;

        $r0 = new java.lang.StringBuilder;

        $l0 = $l0 / 1048576L;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0);

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r1);

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" MB");

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;

     label2:
        $l1 = $l0 / 1024L;

        $b2 = $l1 cmp 0L;

        if $b2 <= 0 goto label3;

        $r0 = new java.lang.StringBuilder;

        $l0 = $l0 / 1024L;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0);

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r1);

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" KB");

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;

     label3:
        $r0 = new java.lang.StringBuilder;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0);

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r1);

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

    public static void cleanDirectory(java.io.File) throws java.io.IOException
    {
        java.io.File $r0;
        java.io.IOException $r1;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r4;
        java.io.File[] $r5;
        int $i0, $i1;

        $r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r4;

     label1:
        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a directory");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r4;

     label2:
        $r5 = virtualinvoke $r0.<java.io.File: java.io.File[] listFiles()>();

        if $r5 != null goto label3;

        $r1 = new java.io.IOException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Failed to list contents of ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label3:
        $r1 = null;

        $i0 = 0;

     label4:
        $i1 = lengthof $r5;

        if $i0 < $i1 goto label5;

        if $r1 == null goto label9;

        throw $r1;

     label5:
        $r0 = $r5[$i0];

     label6:
        staticinvoke <com.happyelements.security.shellguard.FileUtils: void forceDelete(java.io.File)>($r0);

     label7:
        $i0 = $i0 + 1;

        goto label4;

     label8:
        $r1 := @caughtexception;

        goto label7;

     label9:
        return;

        catch java.io.IOException from label6 to label7 with label8;
    }

    private static void cleanDirectoryOnExit(java.io.File) throws java.io.IOException
    {
        java.io.File $r0;
        java.io.IOException $r1;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r4;
        java.io.File[] $r5;
        int $i0, $i1;

        $r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r4;

     label1:
        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a directory");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r4;

     label2:
        $r5 = virtualinvoke $r0.<java.io.File: java.io.File[] listFiles()>();

        if $r5 != null goto label3;

        $r1 = new java.io.IOException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Failed to list contents of ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label3:
        $r1 = null;

        $i0 = 0;

     label4:
        $i1 = lengthof $r5;

        if $i0 < $i1 goto label5;

        if $r1 == null goto label9;

        throw $r1;

     label5:
        $r0 = $r5[$i0];

     label6:
        staticinvoke <com.happyelements.security.shellguard.FileUtils: void forceDeleteOnExit(java.io.File)>($r0);

     label7:
        $i0 = $i0 + 1;

        goto label4;

     label8:
        $r1 := @caughtexception;

        goto label7;

     label9:
        return;

        catch java.io.IOException from label6 to label7 with label8;
    }

    public static boolean contentEquals(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File $r0, $r1, $r5, $r6;
        java.io.FileInputStream $r2, $r3, $r7;
        boolean $z0, $z1;
        java.io.IOException $r4;
        long $l0, $l1;
        byte $b2;
        java.lang.Throwable $r8;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        $z1 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 == $z1 goto label01;

        return 0;

     label01:
        if $z0 != 0 goto label02;

        return 1;

     label02:
        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label03;

        $z0 = virtualinvoke $r1.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label04;

     label03:
        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Can\'t compare directories, only files");

        throw $r4;

     label04:
        $l0 = virtualinvoke $r0.<java.io.File: long length()>();

        $l1 = virtualinvoke $r1.<java.io.File: long length()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label14;

        $r5 = virtualinvoke $r0.<java.io.File: java.io.File getCanonicalFile()>();

        $r6 = virtualinvoke $r1.<java.io.File: java.io.File getCanonicalFile()>();

        $z0 = virtualinvoke $r5.<java.io.File: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label05;

        return 1;

     label05:
        $r3 = null;

        $r7 = null;

     label06:
        $r2 = new java.io.FileInputStream;

        specialinvoke $r2.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

     label07:
        $r3 = new java.io.FileInputStream;

        specialinvoke $r3.<java.io.FileInputStream: void <init>(java.io.File)>($r1);

     label08:
        $z0 = staticinvoke <com.happyelements.security.shellguard.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)>($r2, $r3);

     label09:
        staticinvoke <com.happyelements.security.shellguard.IOUtils: void closeQuietly(java.io.InputStream)>($r2);

        staticinvoke <com.happyelements.security.shellguard.IOUtils: void closeQuietly(java.io.InputStream)>($r3);

        return $z0;

     label10:
        $r8 := @caughtexception;

     label11:
        staticinvoke <com.happyelements.security.shellguard.IOUtils: void closeQuietly(java.io.InputStream)>($r3);

        staticinvoke <com.happyelements.security.shellguard.IOUtils: void closeQuietly(java.io.InputStream)>($r7);

        throw $r8;

     label12:
        $r8 := @caughtexception;

        $r3 = $r2;

        goto label11;

     label13:
        $r8 := @caughtexception;

        $r7 = $r3;

        $r3 = $r2;

        goto label11;

     label14:
        return 0;

        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label08 to label09 with label13;
    }

    public static java.io.File[] convertFileCollectionToFileArray(java.util.Collection)
    {
        java.util.Collection $r0;
        int $i0;
        java.io.File[] $r1;
        java.lang.Object[] $r2;

        $r0 := @parameter0: java.util.Collection;

        $i0 = interfaceinvoke $r0.<java.util.Collection: int size()>();

        $r1 = newarray (java.io.File)[$i0];

        $r2 = interfaceinvoke $r0.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r1);

        $r1 = (java.io.File[]) $r2;

        return $r1;
    }

    public static void copyDirectory(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File $r0, $r1;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        staticinvoke <com.happyelements.security.shellguard.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)>($r0, $r1, 1);

        return;
    }

    public static void copyDirectory(java.io.File, java.io.File, java.io.FileFilter) throws java.io.IOException
    {
        java.io.File $r0, $r1;
        java.io.FileFilter $r2;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        $r2 := @parameter2: java.io.FileFilter;

        staticinvoke <com.happyelements.security.shellguard.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)>($r0, $r1, $r2, 1);

        return;
    }

    public static void copyDirectory(java.io.File, java.io.File, java.io.FileFilter, boolean) throws java.io.IOException
    {
        java.io.File $r0, $r1, $r3, $r12;
        java.io.FileFilter $r2;
        boolean $z0, $z1;
        java.lang.NullPointerException $r4;
        java.io.FileNotFoundException $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r7, $r9;
        java.io.IOException $r8;
        java.util.ArrayList $r10;
        java.io.File[] $r11;
        int $i0, $i1;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        $r2 := @parameter2: java.io.FileFilter;

        $z0 := @parameter3: boolean;

        if $r0 != null goto label01;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("Source must not be null");

        throw $r4;

     label01:
        if $r1 != null goto label02;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("Destination must not be null");

        throw $r4;

     label02:
        $z1 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label03;

        $r5 = new java.io.FileNotFoundException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Source \'");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label03:
        $z1 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z1 != 0 goto label04;

        $r8 = new java.io.IOException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Source \'");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' exists but is not a directory");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r8;

     label04:
        $r7 = virtualinvoke $r0.<java.io.File: java.lang.String getCanonicalPath()>();

        $r9 = virtualinvoke $r1.<java.io.File: java.lang.String getCanonicalPath()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z1 == 0 goto label05;

        $r8 = new java.io.IOException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Source \'");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' and destination \'");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' are the same");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r8;

     label05:
        $r10 = null;

        $r7 = virtualinvoke $r1.<java.io.File: java.lang.String getCanonicalPath()>();

        $r9 = virtualinvoke $r0.<java.io.File: java.lang.String getCanonicalPath()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean startsWith(java.lang.String)>($r9);

        if $z1 == 0 goto label08;

        if $r2 != null goto label09;

        $r11 = virtualinvoke $r0.<java.io.File: java.io.File[] listFiles()>();

     label06:
        if $r11 == null goto label08;

        $i0 = lengthof $r11;

        if $i0 <= 0 goto label08;

        $r10 = new java.util.ArrayList;

        $i0 = lengthof $r11;

        specialinvoke $r10.<java.util.ArrayList: void <init>(int)>($i0);

        $i0 = 0;

     label07:
        $i1 = lengthof $r11;

        if $i0 < $i1 goto label10;

     label08:
        staticinvoke <com.happyelements.security.shellguard.FileUtils: void doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)>($r0, $r1, $r2, $z0, $r10);

        return;

     label09:
        $r11 = virtualinvoke $r0.<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>($r2);

        goto label06;

     label10:
        $r3 = new java.io.File;

        $r12 = $r11[$i0];

        $r7 = virtualinvoke $r12.<java.io.File: java.lang.String getName()>();

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, $r7);

        $r7 = virtualinvoke $r3.<java.io.File: java.lang.String getCanonicalPath()>();

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r7);

        $i0 = $i0 + 1;

        goto label07;
    }

    public static void copyDirectory(java.io.File, java.io.File, boolean) throws java.io.IOException
    {
        java.io.File $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        $z0 := @parameter2: boolean;

        staticinvoke <com.happyelements.security.shellguard.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)>($r0, $r1, null, $z0);

        return;
    }

    public static void copyDirectoryToDirectory(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File $r0, $r1, $r6;
        java.lang.NullPointerException $r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        if $r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Source must not be null");

        throw $r2;

     label1:
        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Source \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a directory");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label2:
        if $r1 != null goto label3;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Destination must not be null");

        throw $r2;

     label3:
        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label4;

        $z0 = virtualinvoke $r1.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label4;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Destination \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a directory");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label4:
        $r6 = new java.io.File;

        $r5 = virtualinvoke $r0.<java.io.File: java.lang.String getName()>();

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, $r5);

        staticinvoke <com.happyelements.security.shellguard.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)>($r0, $r6, 1);

        return;
    }

    public static void copyFile(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File $r0, $r1;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        staticinvoke <com.happyelements.security.shellguard.FileUtils: void copyFile(java.io.File,java.io.File,boolean)>($r0, $r1, 1);

        return;
    }

    public static void copyFile(java.io.File, java.io.File, boolean) throws java.io.IOException
    {
        java.io.File $r0, $r1, $r8;
        boolean $z0, $z1;
        java.lang.NullPointerException $r2;
        java.io.FileNotFoundException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5, $r7;
        java.io.IOException $r6;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        $z0 := @parameter2: boolean;

        if $r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Source must not be null");

        throw $r2;

     label1:
        if $r1 != null goto label2;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Destination must not be null");

        throw $r2;

     label2:
        $z1 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label3;

        $r3 = new java.io.FileNotFoundException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Source \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label3:
        $z1 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label4;

        $r6 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Source \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' exists but is a directory");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r6;

     label4:
        $r5 = virtualinvoke $r0.<java.io.File: java.lang.String getCanonicalPath()>();

        $r7 = virtualinvoke $r1.<java.io.File: java.lang.String getCanonicalPath()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label5;

        $r6 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Source \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' and destination \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' are the same");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r6;

     label5:
        $r8 = virtualinvoke $r1.<java.io.File: java.io.File getParentFile()>();

        if $r8 == null goto label6;

        $r8 = virtualinvoke $r1.<java.io.File: java.io.File getParentFile()>();

        $z1 = virtualinvoke $r8.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label6;

        $r8 = virtualinvoke $r1.<java.io.File: java.io.File getParentFile()>();

        $z1 = virtualinvoke $r8.<java.io.File: boolean mkdirs()>();

        if $z1 != 0 goto label6;

        $r6 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Destination \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' directory cannot be created");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r6;

     label6:
        $z1 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label7;

        $z1 = virtualinvoke $r1.<java.io.File: boolean canWrite()>();

        if $z1 != 0 goto label7;

        $r6 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Destination \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' exists but is read-only");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r6;

     label7:
        staticinvoke <com.happyelements.security.shellguard.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)>($r0, $r1, $z0);

        return;
    }

    public static void copyFileToDirectory(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File $r0, $r1;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        staticinvoke <com.happyelements.security.shellguard.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)>($r0, $r1, 1);

        return;
    }

    public static void copyFileToDirectory(java.io.File, java.io.File, boolean) throws java.io.IOException
    {
        java.io.File $r0, $r1, $r6;
        boolean $z0, $z1;
        java.lang.NullPointerException $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        $z0 := @parameter2: boolean;

        if $r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Destination must not be null");

        throw $r2;

     label1:
        $z1 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label2;

        $z1 = virtualinvoke $r1.<java.io.File: boolean isDirectory()>();

        if $z1 != 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Destination \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a directory");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label2:
        $r6 = new java.io.File;

        $r5 = virtualinvoke $r0.<java.io.File: java.lang.String getName()>();

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, $r5);

        staticinvoke <com.happyelements.security.shellguard.FileUtils: void copyFile(java.io.File,java.io.File,boolean)>($r0, $r6, $z0);

        return;
    }

    public static void copyURLToFile(java.net.URL, java.io.File) throws java.io.IOException
    {
        java.net.URL $r0;
        java.io.File $r1;
        java.io.InputStream $r2;
        java.io.FileOutputStream $r3;
        java.lang.Throwable $r4, $r5;

        $r0 := @parameter0: java.net.URL;

        $r1 := @parameter1: java.io.File;

        $r2 = virtualinvoke $r0.<java.net.URL: java.io.InputStream openStream()>();

     label1:
        $r3 = staticinvoke <com.happyelements.security.shellguard.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)>($r1);

     label2:
        staticinvoke <com.happyelements.security.shellguard.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>($r2, $r3);

     label3:
        staticinvoke <com.happyelements.security.shellguard.IOUtils: void closeQuietly(java.io.OutputStream)>($r3);

     label4:
        staticinvoke <com.happyelements.security.shellguard.IOUtils: void closeQuietly(java.io.InputStream)>($r2);

        return;

     label5:
        $r4 := @caughtexception;

     label6:
        staticinvoke <com.happyelements.security.shellguard.IOUtils: void closeQuietly(java.io.OutputStream)>($r3);

        throw $r4;

     label7:
        $r5 := @caughtexception;

        staticinvoke <com.happyelements.security.shellguard.IOUtils: void closeQuietly(java.io.InputStream)>($r2);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    public static void deleteDirectory(java.io.File) throws java.io.IOException
    {
        java.io.File $r0;
        boolean $z0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        java.io.IOException $r3;

        $r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        staticinvoke <com.happyelements.security.shellguard.FileUtils: void cleanDirectory(java.io.File)>($r0);

        $z0 = virtualinvoke $r0.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label2;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to delete directory ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r2);

        throw $r3;

     label2:
        return;
    }

    private static void deleteDirectoryOnExit(java.io.File) throws java.io.IOException
    {
        java.io.File $r0;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        staticinvoke <com.happyelements.security.shellguard.FileUtils: void cleanDirectoryOnExit(java.io.File)>($r0);

        virtualinvoke $r0.<java.io.File: void deleteOnExit()>();

        return;
    }

    public static boolean deleteQuietly(java.io.File)
    {
        java.io.File $r0;
        java.lang.Exception $r1, $r2;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        if $r0 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label2;

        staticinvoke <com.happyelements.security.shellguard.FileUtils: void cleanDirectory(java.io.File)>($r0);

     label2:
        $z0 = virtualinvoke $r0.<java.io.File: boolean delete()>();

     label3:
        return $z0;

     label4:
        $r1 := @caughtexception;

        return 0;

     label5:
        $r2 := @caughtexception;

        goto label2;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label2 to label3 with label4;
    }

    private static void doCopyDirectory(java.io.File, java.io.File, java.io.FileFilter, boolean, java.util.List) throws java.io.IOException
    {
        java.io.File $r0, $r1, $r8;
        java.io.FileFilter $r2;
        boolean $z0, $z1;
        java.util.List $r3;
        java.io.IOException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        long $l0;
        java.io.File[] $r7;
        int $i1, $i2;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        $r2 := @parameter2: java.io.FileFilter;

        $z0 := @parameter3: boolean;

        $r3 := @parameter4: java.util.List;

        $z1 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label01;

        $z1 = virtualinvoke $r1.<java.io.File: boolean isDirectory()>();

        if $z1 != 0 goto label03;

        $r4 = new java.io.IOException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Destination \'");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' exists but is not a directory");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label01:
        $z1 = virtualinvoke $r1.<java.io.File: boolean mkdirs()>();

        if $z1 != 0 goto label02;

        $r4 = new java.io.IOException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Destination \'");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' directory cannot be created");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label02:
        if $z0 == 0 goto label03;

        $l0 = virtualinvoke $r0.<java.io.File: long lastModified()>();

        virtualinvoke $r1.<java.io.File: boolean setLastModified(long)>($l0);

     label03:
        $z1 = virtualinvoke $r1.<java.io.File: boolean canWrite()>();

        if $z1 != 0 goto label04;

        $r4 = new java.io.IOException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Destination \'");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' cannot be written to");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label04:
        if $r2 != null goto label06;

        $r7 = virtualinvoke $r0.<java.io.File: java.io.File[] listFiles()>();

     label05:
        if $r7 != null goto label07;

        $r4 = new java.io.IOException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Failed to list contents of ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label06:
        $r7 = virtualinvoke $r0.<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>($r2);

        goto label05;

     label07:
        $i1 = 0;

     label08:
        $i2 = lengthof $r7;

        if $i1 < $i2 goto label09;

        return;

     label09:
        $r0 = new java.io.File;

        $r8 = $r7[$i1];

        $r6 = virtualinvoke $r8.<java.io.File: java.lang.String getName()>();

        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, $r6);

        if $r3 == null goto label10;

        $r8 = $r7[$i1];

        $r6 = virtualinvoke $r8.<java.io.File: java.lang.String getCanonicalPath()>();

        $z1 = interfaceinvoke $r3.<java.util.List: boolean contains(java.lang.Object)>($r6);

        if $z1 != 0 goto label11;

     label10:
        $r8 = $r7[$i1];

        $z1 = virtualinvoke $r8.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label12;

        $r8 = $r7[$i1];

        staticinvoke <com.happyelements.security.shellguard.FileUtils: void doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)>($r8, $r0, $r2, $z0, $r3);

     label11:
        $i1 = $i1 + 1;

        goto label08;

     label12:
        $r8 = $r7[$i1];

        staticinvoke <com.happyelements.security.shellguard.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)>($r8, $r0, $z0);

        goto label11;
    }

    private static void doCopyFile(java.io.File, java.io.File, boolean) throws java.io.IOException
    {
        java.io.File $r0, $r1;
        boolean $z0, $z1;
        java.io.FileInputStream $r2;
        java.io.FileOutputStream $r3;
        java.io.IOException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        long $l0, $l1;
        byte $b2;
        java.lang.Throwable $r7, $r8;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        $z0 := @parameter2: boolean;

        $z1 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label01;

        $z1 = virtualinvoke $r1.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label01;

        $r4 = new java.io.IOException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Destination \'");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' exists but is a directory");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label01:
        $r2 = new java.io.FileInputStream;

        specialinvoke $r2.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

     label02:
        $r3 = new java.io.FileOutputStream;

        specialinvoke $r3.<java.io.FileOutputStream: void <init>(java.io.File)>($r1);

     label03:
        staticinvoke <com.happyelements.security.shellguard.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>($r2, $r3);

     label04:
        staticinvoke <com.happyelements.security.shellguard.IOUtils: void closeQuietly(java.io.OutputStream)>($r3);

     label05:
        staticinvoke <com.happyelements.security.shellguard.IOUtils: void closeQuietly(java.io.InputStream)>($r2);

        $l0 = virtualinvoke $r0.<java.io.File: long length()>();

        $l1 = virtualinvoke $r1.<java.io.File: long length()>();

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label09;

        $r4 = new java.io.IOException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Failed to copy full contents from \'");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' to \'");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label06:
        $r7 := @caughtexception;

     label07:
        staticinvoke <com.happyelements.security.shellguard.IOUtils: void closeQuietly(java.io.OutputStream)>($r3);

        throw $r7;

     label08:
        $r8 := @caughtexception;

        staticinvoke <com.happyelements.security.shellguard.IOUtils: void closeQuietly(java.io.InputStream)>($r2);

        throw $r8;

     label09:
        if $z0 == 0 goto label10;

        $l0 = virtualinvoke $r0.<java.io.File: long lastModified()>();

        virtualinvoke $r1.<java.io.File: boolean setLastModified(long)>($l0);

        return;

     label10:
        return;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
    }

    public static void forceDelete(java.io.File) throws java.io.IOException
    {
        java.io.File $r0;
        boolean $z0, $z1;
        java.io.FileNotFoundException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.io.IOException $r4;

        $r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label1;

        staticinvoke <com.happyelements.security.shellguard.FileUtils: void deleteDirectory(java.io.File)>($r0);

        return;

     label1:
        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        $z1 = virtualinvoke $r0.<java.io.File: boolean delete()>();

        if $z1 != 0 goto label3;

        if $z0 != 0 goto label2;

        $r1 = new java.io.FileNotFoundException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("File does not exist: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to delete file: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r3);

        throw $r4;

     label3:
        return;
    }

    public static void forceDeleteOnExit(java.io.File) throws java.io.IOException
    {
        java.io.File $r0;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label1;

        staticinvoke <com.happyelements.security.shellguard.FileUtils: void deleteDirectoryOnExit(java.io.File)>($r0);

        return;

     label1:
        virtualinvoke $r0.<java.io.File: void deleteOnExit()>();

        return;
    }

    public static void forceMkdir(java.io.File) throws java.io.IOException
    {
        java.io.File $r0;
        boolean $z0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        java.io.IOException $r3;

        $r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke $r0.<java.io.File: boolean isFile()>();

        if $z0 == 0 goto label2;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("File ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" exists and is ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("not a directory. Unable to create directory.");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r2);

        throw $r3;

     label1:
        $z0 = virtualinvoke $r0.<java.io.File: boolean mkdirs()>();

        if $z0 != 0 goto label3;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to create directory ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r2);

        throw $r3;

     label2:
        return;

     label3:
        return;
    }

    public static boolean isFileNewer(java.io.File, long)
    {
        java.io.File $r0;
        long $l0, $l1;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;
        byte $b2;

        $r0 := @parameter0: java.io.File;

        $l0 := @parameter1: long;

        if $r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No specified file");

        throw $r1;

     label1:
        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $l1 = virtualinvoke $r0.<java.io.File: long lastModified()>();

        $b2 = $l1 cmp $l0;

        if $b2 <= 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    public static boolean isFileNewer(java.io.File, java.io.File)
    {
        java.io.File $r0, $r1;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        long $l0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No specified reference file");

        throw $r2;

     label1:
        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("The reference file \'");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' doesn\'t exist");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        $l0 = virtualinvoke $r1.<java.io.File: long lastModified()>();

        $z0 = staticinvoke <com.happyelements.security.shellguard.FileUtils: boolean isFileNewer(java.io.File,long)>($r0, $l0);

        return $z0;
    }

    public static boolean isFileNewer(java.io.File, java.util.Date)
    {
        java.io.File $r0;
        java.util.Date $r1;
        java.lang.IllegalArgumentException $r2;
        long $l0;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.util.Date;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No specified date");

        throw $r2;

     label1:
        $l0 = virtualinvoke $r1.<java.util.Date: long getTime()>();

        $z0 = staticinvoke <com.happyelements.security.shellguard.FileUtils: boolean isFileNewer(java.io.File,long)>($r0, $l0);

        return $z0;
    }

    public static boolean isFileOlder(java.io.File, long)
    {
        java.io.File $r0;
        long $l0, $l1;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;
        byte $b2;

        $r0 := @parameter0: java.io.File;

        $l0 := @parameter1: long;

        if $r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No specified file");

        throw $r1;

     label1:
        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $l1 = virtualinvoke $r0.<java.io.File: long lastModified()>();

        $b2 = $l1 cmp $l0;

        if $b2 >= 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    public static boolean isFileOlder(java.io.File, java.io.File)
    {
        java.io.File $r0, $r1;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        long $l0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No specified reference file");

        throw $r2;

     label1:
        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("The reference file \'");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' doesn\'t exist");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        $l0 = virtualinvoke $r1.<java.io.File: long lastModified()>();

        $z0 = staticinvoke <com.happyelements.security.shellguard.FileUtils: boolean isFileOlder(java.io.File,long)>($r0, $l0);

        return $z0;
    }

    public static boolean isFileOlder(java.io.File, java.util.Date)
    {
        java.io.File $r0;
        java.util.Date $r1;
        java.lang.IllegalArgumentException $r2;
        long $l0;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.util.Date;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No specified date");

        throw $r2;

     label1:
        $l0 = virtualinvoke $r1.<java.util.Date: long getTime()>();

        $z0 = staticinvoke <com.happyelements.security.shellguard.FileUtils: boolean isFileOlder(java.io.File,long)>($r0, $l0);

        return $z0;
    }

    public static void moveDirectory(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File $r0, $r1;
        java.lang.NullPointerException $r2;
        boolean $z0;
        java.io.FileNotFoundException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        java.io.IOException $r6;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        if $r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Source must not be null");

        throw $r2;

     label1:
        if $r1 != null goto label2;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Destination must not be null");

        throw $r2;

     label2:
        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label3;

        $r3 = new java.io.FileNotFoundException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Source \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label3:
        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label4;

        $r6 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Source \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a directory");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r6;

     label4:
        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label5;

        $r6 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Destination \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' already exists");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r6;

     label5:
        $z0 = virtualinvoke $r0.<java.io.File: boolean renameTo(java.io.File)>($r1);

        if $z0 != 0 goto label6;

        staticinvoke <com.happyelements.security.shellguard.FileUtils: void copyDirectory(java.io.File,java.io.File)>($r0, $r1);

        staticinvoke <com.happyelements.security.shellguard.FileUtils: void deleteDirectory(java.io.File)>($r0);

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label7;

        $r6 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Failed to delete original directory \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' after copy to \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r6;

     label6:
        return;

     label7:
        return;
    }

    public static void moveDirectoryToDirectory(java.io.File, java.io.File, boolean) throws java.io.IOException
    {
        java.io.File $r0, $r1, $r7;
        boolean $z0, $z1;
        java.lang.NullPointerException $r2;
        java.io.FileNotFoundException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        java.io.IOException $r6;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        $z0 := @parameter2: boolean;

        if $r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Source must not be null");

        throw $r2;

     label1:
        if $r1 != null goto label2;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Destination directory must not be null");

        throw $r2;

     label2:
        $z1 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label3;

        if $z0 == 0 goto label3;

        virtualinvoke $r1.<java.io.File: boolean mkdirs()>();

     label3:
        $z1 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label4;

        $r3 = new java.io.FileNotFoundException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Destination directory \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist [createDestDir=");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label4:
        $z0 = virtualinvoke $r1.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label5;

        $r6 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Destination \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a directory");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r6;

     label5:
        $r7 = new java.io.File;

        $r5 = virtualinvoke $r0.<java.io.File: java.lang.String getName()>();

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, $r5);

        staticinvoke <com.happyelements.security.shellguard.FileUtils: void moveDirectory(java.io.File,java.io.File)>($r0, $r7);

        return;
    }

    public static void moveFile(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File $r0, $r1;
        java.lang.NullPointerException $r2;
        boolean $z0;
        java.io.FileNotFoundException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        java.io.IOException $r6;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        if $r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Source must not be null");

        throw $r2;

     label1:
        if $r1 != null goto label2;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Destination must not be null");

        throw $r2;

     label2:
        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label3;

        $r3 = new java.io.FileNotFoundException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Source \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label3:
        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label4;

        $r6 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Source \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is a directory");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r6;

     label4:
        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label5;

        $r6 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Destination \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' already exists");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r6;

     label5:
        $z0 = virtualinvoke $r1.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label6;

        $r6 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Destination \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is a directory");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r6;

     label6:
        $z0 = virtualinvoke $r0.<java.io.File: boolean renameTo(java.io.File)>($r1);

        if $z0 != 0 goto label7;

        staticinvoke <com.happyelements.security.shellguard.FileUtils: void copyFile(java.io.File,java.io.File)>($r0, $r1);

        $z0 = virtualinvoke $r0.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label8;

        staticinvoke <com.happyelements.security.shellguard.FileUtils: boolean deleteQuietly(java.io.File)>($r1);

        $r6 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Failed to delete original file \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' after copy to \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r6;

     label7:
        return;

     label8:
        return;
    }

    public static void moveFileToDirectory(java.io.File, java.io.File, boolean) throws java.io.IOException
    {
        java.io.File $r0, $r1, $r7;
        boolean $z0, $z1;
        java.lang.NullPointerException $r2;
        java.io.FileNotFoundException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        java.io.IOException $r6;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        $z0 := @parameter2: boolean;

        if $r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Source must not be null");

        throw $r2;

     label1:
        if $r1 != null goto label2;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Destination directory must not be null");

        throw $r2;

     label2:
        $z1 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label3;

        if $z0 == 0 goto label3;

        virtualinvoke $r1.<java.io.File: boolean mkdirs()>();

     label3:
        $z1 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label4;

        $r3 = new java.io.FileNotFoundException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Destination directory \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist [createDestDir=");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label4:
        $z0 = virtualinvoke $r1.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label5;

        $r6 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Destination \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a directory");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r6;

     label5:
        $r7 = new java.io.File;

        $r5 = virtualinvoke $r0.<java.io.File: java.lang.String getName()>();

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, $r5);

        staticinvoke <com.happyelements.security.shellguard.FileUtils: void moveFile(java.io.File,java.io.File)>($r0, $r7);

        return;
    }

    public static void moveToDirectory(java.io.File, java.io.File, boolean) throws java.io.IOException
    {
        java.io.File $r0, $r1;
        boolean $z0, $z1;
        java.lang.NullPointerException $r2;
        java.io.FileNotFoundException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        $z0 := @parameter2: boolean;

        if $r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Source must not be null");

        throw $r2;

     label1:
        if $r1 != null goto label2;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Destination must not be null");

        throw $r2;

     label2:
        $z1 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label3;

        $r3 = new java.io.FileNotFoundException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Source \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label3:
        $z1 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label4;

        staticinvoke <com.happyelements.security.shellguard.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>($r0, $r1, $z0);

        return;

     label4:
        staticinvoke <com.happyelements.security.shellguard.FileUtils: void moveFileToDirectory(java.io.File,java.io.File,boolean)>($r0, $r1, $z0);

        return;
    }

    public static java.io.FileInputStream openInputStream(java.io.File) throws java.io.IOException
    {
        java.io.File $r0;
        boolean $z0;
        java.io.IOException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.io.FileNotFoundException $r4;
        java.io.FileInputStream $r5;

        $r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label1;

        $r1 = new java.io.IOException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("File \'");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' exists but is a directory");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label1:
        $z0 = virtualinvoke $r0.<java.io.File: boolean canRead()>();

        if $z0 != 0 goto label3;

        $r1 = new java.io.IOException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("File \'");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' cannot be read");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        $r4 = new java.io.FileNotFoundException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("File \'");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r3);

        throw $r4;

     label3:
        $r5 = new java.io.FileInputStream;

        specialinvoke $r5.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

        return $r5;
    }

    public static java.io.FileOutputStream openOutputStream(java.io.File) throws java.io.IOException
    {
        java.io.File $r0, $r4;
        boolean $z0;
        java.io.IOException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.io.FileOutputStream $r5;

        $r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label1;

        $r1 = new java.io.IOException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("File \'");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' exists but is a directory");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label1:
        $z0 = virtualinvoke $r0.<java.io.File: boolean canWrite()>();

        if $z0 != 0 goto label3;

        $r1 = new java.io.IOException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("File \'");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' cannot be written to");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        $r4 = virtualinvoke $r0.<java.io.File: java.io.File getParentFile()>();

        if $r4 == null goto label3;

        $z0 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label3;

        $z0 = virtualinvoke $r4.<java.io.File: boolean mkdirs()>();

        if $z0 != 0 goto label3;

        $r1 = new java.io.IOException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("File \'");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' could not be created");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label3:
        $r5 = new java.io.FileOutputStream;

        specialinvoke $r5.<java.io.FileOutputStream: void <init>(java.io.File)>($r0);

        return $r5;
    }

    public static byte[] readFileToByteArray(java.io.File) throws java.io.IOException
    {
        java.io.File $r0;
        java.io.FileInputStream $r1, $r2;
        byte[] $r3;
        java.lang.Throwable $r4;

        $r0 := @parameter0: java.io.File;

        $r1 = null;

     label1:
        $r2 = staticinvoke <com.happyelements.security.shellguard.FileUtils: java.io.FileInputStream openInputStream(java.io.File)>($r0);

        $r1 = $r2;

        $r3 = staticinvoke <com.happyelements.security.shellguard.IOUtils: byte[] toByteArray(java.io.InputStream)>($r2);

     label2:
        staticinvoke <com.happyelements.security.shellguard.IOUtils: void closeQuietly(java.io.InputStream)>($r2);

        return $r3;

     label3:
        $r4 := @caughtexception;

        staticinvoke <com.happyelements.security.shellguard.IOUtils: void closeQuietly(java.io.InputStream)>($r1);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.lang.String readFileToString(java.io.File) throws java.io.IOException
    {
        java.io.File $r0;
        java.lang.String $r1;

        $r0 := @parameter0: java.io.File;

        $r1 = staticinvoke <com.happyelements.security.shellguard.FileUtils: java.lang.String readFileToString(java.io.File,java.lang.String)>($r0, null);

        return $r1;
    }

    public static java.lang.String readFileToString(java.io.File, java.lang.String) throws java.io.IOException
    {
        java.io.File $r0;
        java.lang.String $r1;
        java.io.FileInputStream $r2, $r3;
        java.lang.Throwable $r4;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.String;

        $r2 = null;

     label1:
        $r3 = staticinvoke <com.happyelements.security.shellguard.FileUtils: java.io.FileInputStream openInputStream(java.io.File)>($r0);

        $r2 = $r3;

        $r1 = staticinvoke <com.happyelements.security.shellguard.IOUtils: java.lang.String toString(java.io.InputStream,java.lang.String)>($r3, $r1);

     label2:
        staticinvoke <com.happyelements.security.shellguard.IOUtils: void closeQuietly(java.io.InputStream)>($r3);

        return $r1;

     label3:
        $r4 := @caughtexception;

        staticinvoke <com.happyelements.security.shellguard.IOUtils: void closeQuietly(java.io.InputStream)>($r2);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.util.List readLines(java.io.File) throws java.io.IOException
    {
        java.io.File $r0;
        java.util.List $r1;

        $r0 := @parameter0: java.io.File;

        $r1 = staticinvoke <com.happyelements.security.shellguard.FileUtils: java.util.List readLines(java.io.File,java.lang.String)>($r0, null);

        return $r1;
    }

    public static java.util.List readLines(java.io.File, java.lang.String) throws java.io.IOException
    {
        java.io.File $r0;
        java.lang.String $r1;
        java.io.FileInputStream $r2, $r3;
        java.util.List $r4;
        java.lang.Throwable $r5;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.String;

        $r2 = null;

     label1:
        $r3 = staticinvoke <com.happyelements.security.shellguard.FileUtils: java.io.FileInputStream openInputStream(java.io.File)>($r0);

        $r2 = $r3;

        $r4 = staticinvoke <com.happyelements.security.shellguard.IOUtils: java.util.List readLines(java.io.InputStream,java.lang.String)>($r3, $r1);

     label2:
        staticinvoke <com.happyelements.security.shellguard.IOUtils: void closeQuietly(java.io.InputStream)>($r3);

        return $r4;

     label3:
        $r5 := @caughtexception;

        staticinvoke <com.happyelements.security.shellguard.IOUtils: void closeQuietly(java.io.InputStream)>($r2);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static long sizeOfDirectory(java.io.File)
    {
        java.io.File $r0;
        boolean $z0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        java.lang.IllegalArgumentException $r3;
        long $l0, $l3;
        java.io.File[] $r4;
        int $i1, $i2;

        $r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r3;

     label1:
        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label2;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a directory");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r3;

     label2:
        $l0 = 0L;

        $r4 = virtualinvoke $r0.<java.io.File: java.io.File[] listFiles()>();

        if $r4 != null goto label3;

        return 0L;

     label3:
        $i1 = 0;

     label4:
        $i2 = lengthof $r4;

        if $i1 < $i2 goto label5;

        return $l0;

     label5:
        $r0 = $r4[$i1];

        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label7;

        $l3 = staticinvoke <com.happyelements.security.shellguard.FileUtils: long sizeOfDirectory(java.io.File)>($r0);

        $l0 = $l0 + $l3;

     label6:
        $i1 = $i1 + 1;

        goto label4;

     label7:
        $l3 = virtualinvoke $r0.<java.io.File: long length()>();

        $l0 = $l0 + $l3;

        goto label6;
    }

    public static java.io.File toFile(java.net.URL)
    {
        java.net.URL $r0;
        char $c0;
        java.lang.String $r1, $r3;
        boolean $z0;
        int $i1, $i2, $i3, $i4;
        java.io.File $r2;
        java.lang.StringBuilder $r4;

        $r0 := @parameter0: java.net.URL;

        if $r0 == null goto label1;

        $r1 = virtualinvoke $r0.<java.net.URL: java.lang.String getProtocol()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("file");

        if $z0 != 0 goto label2;

     label1:
        return null;

     label2:
        $r1 = virtualinvoke $r0.<java.net.URL: java.lang.String getFile()>();

        $c0 = <java.io.File: char separatorChar>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(char,char)>(47, $c0);

        $i1 = 0;

     label3:
        $i2 = virtualinvoke $r1.<java.lang.String: int indexOf(int,int)>(37, $i1);

        $i1 = $i2;

        if $i2 >= 0 goto label4;

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r1);

        return $r2;

     label4:
        $i3 = $i2 + 2;

        $i4 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i3 >= $i4 goto label3;

        $i3 = $i2 + 1;

        $i4 = $i2 + 3;

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i3, $i4);

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r3, 16);

        $c0 = (char) $i3;

        $r4 = new java.lang.StringBuilder;

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $i2 = $i2 + 3;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label3;
    }

    public static java.io.File[] toFiles(java.net.URL[])
    {
        java.net.URL[] $r0;
        java.net.URL $r1;
        int $i0, $i1;
        java.io.File[] $r2;
        java.lang.String $r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;
        java.io.File $r6;

        $r0 := @parameter0: java.net.URL[];

        if $r0 == null goto label1;

        $i0 = lengthof $r0;

        if $i0 != 0 goto label2;

     label1:
        $r2 = <com.happyelements.security.shellguard.FileUtils: java.io.File[] EMPTY_FILE_ARRAY>;

        return $r2;

     label2:
        $i0 = lengthof $r0;

        $r2 = newarray (java.io.File)[$i0];

        $i0 = 0;

     label3:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label6;

        $r1 = $r0[$i0];

        if $r1 == null goto label5;

        $r3 = virtualinvoke $r1.<java.net.URL: java.lang.String getProtocol()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("file");

        if $z0 != 0 goto label4;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("URL could not be converted to a File: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r4;

     label4:
        $r6 = staticinvoke <com.happyelements.security.shellguard.FileUtils: java.io.File toFile(java.net.URL)>($r1);

        $r2[$i0] = $r6;

     label5:
        $i0 = $i0 + 1;

        goto label3;

     label6:
        return $r2;
    }

    private static java.lang.String[] toSuffixes(java.lang.String[])
    {
        java.lang.String[] $r0, $r1;
        int $i0, $i1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @parameter0: java.lang.String[];

        $i0 = lengthof $r0;

        $r1 = newarray (java.lang.String)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if $i0 < $i1 goto label2;

        return $r1;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>(".");

        $r3 = $r0[$i0];

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r1[$i0] = $r3;

        $i0 = $i0 + 1;

        goto label1;
    }

    public static java.net.URL[] toURLs(java.io.File[]) throws java.io.IOException
    {
        java.io.File[] $r0;
        java.net.URL[] $r1;
        java.net.URL $r2;
        int $i0, $i1;
        java.io.File $r3;

        $r0 := @parameter0: java.io.File[];

        $i0 = lengthof $r0;

        $r1 = newarray (java.net.URL)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if $i0 < $i1 goto label2;

        return $r1;

     label2:
        $r3 = $r0[$i0];

        $r2 = virtualinvoke $r3.<java.io.File: java.net.URL toURL()>();

        $r1[$i0] = $r2;

        $i0 = $i0 + 1;

        goto label1;
    }

    public static void touch(java.io.File) throws java.io.IOException
    {
        java.io.File $r0;
        boolean $z0;
        java.io.FileOutputStream $r1;
        long $l0;
        java.io.IOException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        $r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r1 = staticinvoke <com.happyelements.security.shellguard.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)>($r0);

        staticinvoke <com.happyelements.security.shellguard.IOUtils: void closeQuietly(java.io.OutputStream)>($r1);

     label1:
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $z0 = virtualinvoke $r0.<java.io.File: boolean setLastModified(long)>($l0);

        if $z0 != 0 goto label2;

        $r2 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to set the last modification time for ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        return;
    }

    public static boolean waitFor(java.io.File, int)
    {
        java.io.File $r0;
        int $i0, $i2, $i3;
        java.lang.Exception $r1;
        boolean $z0;
        java.lang.InterruptedException $r2;

        $r0 := @parameter0: java.io.File;

        $i0 := @parameter1: int;

        $i2 = 0;

        $i3 = 0;

     label1:
        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label3;

     label2:
        return 1;

     label3:
        if $i3 < 10 goto label9;

        $i3 = 0;

        if $i2 <= $i0 goto label4;

        return 0;

     label4:
        $i2 = $i2 + 1;

     label5:
        staticinvoke <java.lang.Thread: void sleep(long)>(100L);

     label6:
        goto label1;

     label7:
        $r2 := @caughtexception;

        goto label1;

     label8:
        $r1 := @caughtexception;

        goto label2;

     label9:
        $i3 = $i3 + 1;

        goto label5;

        catch java.lang.InterruptedException from label5 to label6 with label7;
        catch java.lang.Exception from label5 to label6 with label8;
    }

    public static void writeByteArrayToFile(java.io.File, byte[]) throws java.io.IOException
    {
        java.io.File $r0;
        byte[] $r1;
        java.lang.Throwable $r2;
        java.io.FileOutputStream $r3, $r4;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: byte[];

        $r4 = null;

     label1:
        $r3 = staticinvoke <com.happyelements.security.shellguard.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)>($r0);

        $r4 = $r3;

        virtualinvoke $r3.<java.io.OutputStream: void write(byte[])>($r1);

     label2:
        staticinvoke <com.happyelements.security.shellguard.IOUtils: void closeQuietly(java.io.OutputStream)>($r3);

        return;

     label3:
        $r2 := @caughtexception;

        staticinvoke <com.happyelements.security.shellguard.IOUtils: void closeQuietly(java.io.OutputStream)>($r4);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void writeLines(java.io.File, java.lang.String, java.util.Collection) throws java.io.IOException
    {
        java.io.File $r0;
        java.lang.String $r1;
        java.util.Collection $r2;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.util.Collection;

        staticinvoke <com.happyelements.security.shellguard.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)>($r0, $r1, $r2, null);

        return;
    }

    public static void writeLines(java.io.File, java.lang.String, java.util.Collection, java.lang.String) throws java.io.IOException
    {
        java.io.File $r0;
        java.lang.String $r1, $r3;
        java.util.Collection $r2;
        java.lang.Throwable $r4;
        java.io.FileOutputStream $r5, $r6;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.util.Collection;

        $r3 := @parameter3: java.lang.String;

        $r6 = null;

     label1:
        $r5 = staticinvoke <com.happyelements.security.shellguard.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)>($r0);

        $r6 = $r5;

        staticinvoke <com.happyelements.security.shellguard.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)>($r2, $r3, $r5, $r1);

     label2:
        staticinvoke <com.happyelements.security.shellguard.IOUtils: void closeQuietly(java.io.OutputStream)>($r5);

        return;

     label3:
        $r4 := @caughtexception;

        staticinvoke <com.happyelements.security.shellguard.IOUtils: void closeQuietly(java.io.OutputStream)>($r6);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void writeLines(java.io.File, java.util.Collection) throws java.io.IOException
    {
        java.io.File $r0;
        java.util.Collection $r1;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.util.Collection;

        staticinvoke <com.happyelements.security.shellguard.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)>($r0, null, $r1, null);

        return;
    }

    public static void writeLines(java.io.File, java.util.Collection, java.lang.String) throws java.io.IOException
    {
        java.io.File $r0;
        java.util.Collection $r1;
        java.lang.String $r2;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: java.lang.String;

        staticinvoke <com.happyelements.security.shellguard.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)>($r0, null, $r1, $r2);

        return;
    }

    public static void writeStringToFile(java.io.File, java.lang.String) throws java.io.IOException
    {
        java.io.File $r0;
        java.lang.String $r1;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.String;

        staticinvoke <com.happyelements.security.shellguard.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.lang.String)>($r0, $r1, null);

        return;
    }

    public static void writeStringToFile(java.io.File, java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.io.File $r0;
        java.lang.String $r1, $r2;
        java.lang.Throwable $r3;
        java.io.FileOutputStream $r4, $r5;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r5 = null;

     label1:
        $r4 = staticinvoke <com.happyelements.security.shellguard.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)>($r0);

        $r5 = $r4;

        staticinvoke <com.happyelements.security.shellguard.IOUtils: void write(java.lang.String,java.io.OutputStream,java.lang.String)>($r1, $r4, $r2);

     label2:
        staticinvoke <com.happyelements.security.shellguard.IOUtils: void closeQuietly(java.io.OutputStream)>($r4);

        return;

     label3:
        $r3 := @caughtexception;

        staticinvoke <com.happyelements.security.shellguard.IOUtils: void closeQuietly(java.io.OutputStream)>($r5);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
